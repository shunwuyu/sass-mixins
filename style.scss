* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

$box-background:pink;
$background:#ccc;
$breakpoints: (
  'sm': 'only screen and  (min-width: 480px)',
  'md': 'only screen and ( min-width: 768px)',
  'lg': 'only screen and ( min-width: 992px)'
) !default;




@mixin box {
  width:100px;
  height: 100px;
  background-color: $box-background;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin abs-pos($top:auto,$right:auto,$bottom:auto,$left:auto) {
  top:$top;
  right:$right;
  bottom:$bottom;
  left:$left;
  position: absolute;
}

@function calculateRem($size: 16) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin text-center() {
  text-align: center;
}

@mixin clearfix() {
  &:before,
  &:after {
    content:'';
    display: table;
  }
  &:after{
    clear:both;
  }
}

@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);

  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }

  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}

@function makelongshadow($color) {
  $val: 0px 0px $color;
  @for $i from 1 through 100 {
    $val: #{$val}, #{$i}px #{$i}px #{$color};
  }
  @return $val;
}

@mixin longshadow($color) {
  text-shadow: makelongshadow($color);
}


.box {
  margin:10px auto;
  @include box;

}

.box1 {
  @include border-radius(10px);
}

.box2{
  @include border-radius(50%);
}

.box3 {
  position: relative;
}

.abs{
  @include abs-pos(5px,15px,5px,5px);
  width: 10px;
  height: 10px;
  background-color:$background;
}

.f14{
  @include font-size(14px);
  @include text-center;
}

.container {
  @include clearfix();
  h1 {
    @include text-center();
    @include longshadow(darken(#EEE, 5% ));
  }
}

.foo {
  opacity:0;
  @include text-center();
  @include when-inside('.active') {
    animation:fadeIn 0.3s 1s forwards;
  }
}
.aside {
  width:100%;
  height:100px;
  background-color:$background;
  @include respond-to('md') {
    width:30%;
    float:right;
  }
}

@keyframes fadeIn {
  from{
    opacity:0;
  }
  to{
    opacity:1;
  }
}
